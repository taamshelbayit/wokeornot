<% layout('layout') %>

<div class="container mt-4 text-light">
  <h2 class="text-warning" style="font-family: 'Bebas Neue', sans-serif;">
    Search Results for "<%= q %>"
  </h2>

  <p class="text-muted">
    Showing page <%= currentPage %> of <%= totalPages %> (Total: <%= totalCount %>)
  </p>

  <% if (results.length === 0) { %>
    <p>No results found.</p>
  <% } else { %>
    <div id="searchResults" class="row">
      <% results.forEach(item => { %>
        <div class="col-md-3 col-sm-6 mb-4">
          <div class="card h-100">
            <% if (item.posterPath) { %>
              <img
                src="https://image.tmdb.org/t/p/w500<%= item.posterPath %>"
                class="card-img-top"
                alt="<%= item.title %>"
              >
            <% } %>
            <div class="card-body">
              <h5 class="card-title"><%= item.title %></h5>
              <% if (item.ratings && item.ratings.length > 0) { %>
                <p><%= item.averageRating.toFixed(1) %>/10</p>
              <% } else if (item.notWokeCount > 0) { %>
                <p><%= item.notWokeCount %> Not Woke</p>
              <% } else { %>
                <p>No Ratings</p>
              <% } %>
              <a href="/movies/<%= item._id %>" class="btn btn-sm btn-outline-warning">
                View
              </a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- "Load More" if more pages remain -->
    <% if (currentPage < totalPages) { %>
      <div class="text-center mt-3">
        <button
          id="loadMoreBtn"
          class="btn btn-warning"
          data-nextpage="<%= currentPage + 1 %>"
          data-sortparam="<%= sortParam %>"
        >
          Load More
        </button>
      </div>
    <% } %>
  <% } %>
</div>

<script>
  const loadMoreBtn = document.getElementById('loadMoreBtn');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', async function() {
      const nextPage = this.dataset.nextpage;
      const sortParam = this.dataset.sortparam || '';
      // We'll parse the current query string from location
      const urlParams = new URLSearchParams(window.location.search);
      // e.g. get "q" from ?q=...
      const q = urlParams.get('q') || '';

      // Also get any other params we want to preserve
      const contentType = urlParams.get('contentType') || '';
      const minRating = urlParams.get('minRating') || '';
      const maxRating = urlParams.get('maxRating') || '';
      const category = urlParams.get('category') || '';
      const notWokeOnly = urlParams.get('notWokeOnly') || '';

      // Construct fetch URL
      let fetchUrl = `/search?page=${nextPage}&sort=${sortParam}`;
      if (q) fetchUrl += `&q=${encodeURIComponent(q)}`;
      if (contentType) fetchUrl += `&contentType=${contentType}`;
      if (minRating) fetchUrl += `&minRating=${minRating}`;
      if (maxRating) fetchUrl += `&maxRating=${maxRating}`;
      if (category) fetchUrl += `&category=${encodeURIComponent(category)}`;
      if (notWokeOnly) fetchUrl += `&notWokeOnly=on`;

      try {
        const res = await fetch(fetchUrl, {
          headers: { 'X-Requested-With': 'XMLHttpRequest' }
        });
        if (!res.ok) throw new Error('Network error');
        const data = await res.json();

        const container = document.getElementById('searchResults');
        data.items.forEach(item => {
          const col = document.createElement('div');
          col.className = 'col-md-3 col-sm-6 mb-4';
          col.innerHTML = `
            <div class="card h-100">
              ${item.posterPath ? `
                <img
                  src="https://image.tmdb.org/t/p/w500${item.posterPath}"
                  class="card-img-top"
                  alt="${item.title}"
                >
              ` : ''}
              <div class="card-body">
                <h5 class="card-title">${item.title}</h5>
                ${renderRating(item)}
                <a href="/movies/${item._id}" class="btn btn-sm btn-outline-warning">
                  View
                </a>
              </div>
            </div>
          `;
          container.appendChild(col);
        });

        // If we have more pages, update data-nextpage. Else remove the button
        if (data.currentPage < data.totalPages) {
          loadMoreBtn.dataset.nextpage = data.currentPage + 1;
        } else {
          loadMoreBtn.remove();
        }
      } catch (err) {
        console.error(err);
        alert('Error loading more results.');
      }
    });

    function renderRating(item) {
      if (item.ratings && item.ratings.length > 0) {
        return `<p>${(item.averageRating || 0).toFixed(1)}/10</p>`;
      } else if (item.notWokeCount && item.notWokeCount > 0) {
        return `<p>${item.notWokeCount} Not Woke</p>`;
      } else {
        return '<p>No Ratings</p>';
      }
    }
  }
</script>
